Component Name
HorizontalTimeline

Purpose
Interactive, non-wrapping year (or month) timeline that lets the user scroll horizontally.

Center item = “focus” → visually enlarged.

When focus changes, RelevantArticlesList below re-queries the datastore for items whose timestamp falls within the focused period (e.g., the highlighted year).

Visual Anatomy
Element	Type	Notes
TimelineTrack	Horizontal FlatList / ListView / ScrollView	Snap-scrolling enabled; no infinite loop.
TimelineItem	Row cell	Label = year or month string. Uses scale transform & opacity to indicate focus.
FocusIndicator (optional)	Invisible 50 %-width overlay centered in viewport	Detects which item is mostly inside the indicator.
RelevantArticlesList	Vertical FlatList under track	Card style; updates on focus change.

States & Styles
State	Scale	Opacity	Font-Weight
Focused	1.3×	1.0	Bold
Adjacent	1.0	0.6	Normal
Off-screen	—	0	—

Colors, fonts, shadows can come from your design system token set.

Behaviour (“When X happens, do Y”)
Initial render

Scroll position centers on currentYear.

RelevantArticlesList queries articles where year == currentYear.

Horizontal scroll

Enable snapToInterval (React Native) or PageController with viewportFraction (Flutter) so one item is always centered.

Listen to onMomentumScrollEnd (RN) or onPageChanged (Flutter).

Determine focusedIndex and the corresponding focusedYear.

Focus change

Animate previous focus back to normal style; animate new focus to Focused style (Animated API or AnimatedContainer).

Fire onFocusChange(focusedYear) callback.

Update articles

Parent view receives callback → runs getArticlesByYear(focusedYear) (or more granular query).

Display results in RelevantArticlesList.

If no results, show empty-state graphic/text.

Edge handling (non-wrap)

Disable scroll past first/last year by setting content inset or checking against data length.

Data Contract
ts
Copy
Edit
type TimelineItem = { id: string; label: string; year: number };
type Article = {
  id: string;
  title: string;
  date: Date;      // must include year
  summary: string;
  imageUrl?: string;
};
Timeline props

ts
Copy
Edit
initialYear: number        // e.g., 2023
items: TimelineItem[]      // sorted ascending
onFocusChange: (year:number)=>void
RelevantArticlesList props

ts
Copy
Edit
year: number
fetchArticles: (year:number)=>Promise<Article[]>
Suggested Implementation Snippet (React Native / Expo)
tsx
Copy
Edit
// TimelineTrack.tsx (excerpt)
<Animated.FlatList
  horizontal
  data={items}
  ref={flatRef}
  snapToInterval={ITEM_WIDTH}
  decelerationRate="fast"
  showsHorizontalScrollIndicator={false}
  onMomentumScrollEnd={e => {
    const offset = e.nativeEvent.contentOffset.x;
    const index = Math.round(offset / ITEM_WIDTH);
    const year = items[index].year;
    setFocusedIndex(index);
    onFocusChange(year);
  }}
  renderItem={({item, index}) => {
    const isFocused = index === focusedIndex;
    return (
      <Animated.View style={{
        transform: [{ scale: isFocused ? 1.3 : 1 }],
        opacity: isFocused ? 1 : 0.6,
      }}>
        <Text style={{ fontWeight: isFocused ? '700' : '400' }}>
          {item.label}
        </Text>
      </Animated.View>
    );
  }}
/>
(Flutter code would use PageView with a PageController, a Transform.scale, and AnimatedOpacity in itemBuilder.)